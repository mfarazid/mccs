.row
  .col-sm-8
    - modal ||= false
    - remote = modal ? true : false  
    = bv_form_for(@series, remote: remote, html: {role: :form, 'data-model' => 'series'}) do |f|
      = f.text_field :name, required: true
      = f.text_field :start_date, :class => 'series_datepicker', :placeholder => "mmmm dd, yyyy", append: "<i class='fa fa-calendar'></i>".html_safe, required: true
      = f.text_field :end_date, :class => 'series_datepicker', :placeholder => "mmmm dd, yyyy", append: "<i class='fa fa-calendar'></i>".html_safe, required: true
      = f.hidden_field :user_id
      = f.submit 'Submit', :class => 'btn btn-primary' 
    :Javascript
      $(document).ready(function() { 
        $(document).bind('ajaxError', 'form#new_series', function(event, jqxhr, settings, exception){

          // note: jqxhr.responseJSON undefined, parsing responseText instead
          $(event.data).render_form_errors( $.parseJSON(jqxhr.responseText) );

        });

        $('#series_start_date, #series_end_date').change(function() {
          $('#new_series').bootstrapValidator('revalidateField', 'series[start_date]');
          $('#new_series').bootstrapValidator('revalidateField', 'series[end_date]');
        });

        $('#new_series')
            .bootstrapValidator()
              .on('success.form.bv', function(e) {
                  // Called when the form is valid
                  var $form = $(e.target);
                  if ($form.data('remote')) {
                      e.preventDefault();
                      return false;
                  }
              })
              .on('submit', function(e) {
                  var $form = $(e.target);
                  if ($form.data('remote')) {
                      var numInvalidFields = $form.data('bootstrapValidator').getInvalidFields().length;
                      if (numInvalidFields) {
                          e.preventDefault();
                          return false;
                      }
                  }
              });
      });
      (function($) {

        $.fn.modal_success = function(){
          // close modal
          this.modal('hide');

          // clear form input elements
          // todo/note: handle textarea, select, etc
          this.find('form input[type="text"]').val('');

          // clear error state
          this.clear_previous_errors();

          // reload page 
          location.reload();
        };

        $.fn.render_form_errors = function(errors){

          $form = this;
          this.clear_previous_errors();
          model = this.data('model');

          // show error messages in input form-group help-block
          $.each(errors, function(field, messages){
            $input = $('input[name="' + model + '[' + field + ']"]');
            $input.closest('.form-group').addClass('has-error').find('.help-block').html( messages.join(' & ') );
          });

        };

        $.fn.clear_previous_errors = function(){
          $('.form-group.has-error', this).each(function(){
            $('.help-block', $(this)).html('');
            $(this).removeClass('has-error');
          });
        }

      }(jQuery));       

